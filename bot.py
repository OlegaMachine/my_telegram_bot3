import os
import logging
import sqlite3
from datetime import datetime, timedelta
from random import randint
import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram import Message
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8142815825:AAEZeUHIXI2j44VDG6SrH8Vjv--jko7j7Eo"
DB = "timoteo_store.db"
COURSE_DEFAULT = 1.55
MIN_STARS = 50
REF_PERCENT = 5
ADMIN_IDS = [1012303659, 694613924]  # –í–∞—à Telegram ID. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∞, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: [1012303659, 222222222]
PAYMENTS_DIR = "payments"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
os.makedirs(PAYMENTS_DIR, exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(
    CHOOSING,
    BUY_USERNAME,
    BUY_AMOUNT,
    WAIT_PAYMENT,
    ADMIN_PANEL,
    ADMIN_SET_COURSE,
    ADMIN_BROADCAST,
    VIEW_ORDERS,
    LEAVE_FEEDBACK,
) = range(9)

# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
(EXCHANGE_BONUS, CONFIRM_ORDER) = (9, 10)

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = None
    try:
        conn = sqlite3.connect(DB)
        cur = conn.cursor()
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                stars INTEGER DEFAULT 0,
                referral_id INTEGER,
                referral_bonus INTEGER DEFAULT 0,
                referrals_count INTEGER DEFAULT 0,
                last_spin TEXT,
                registration_date TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                order_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                recipient_username TEXT,
                stars_amount INTEGER,
                price REAL,
                paid INTEGER DEFAULT 0,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        """)
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS settings (
                key TEXT PRIMARY KEY,
                value TEXT
            )
        """)
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS feedback (
                feedback_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                text TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        """)
        
        cur.execute("CREATE INDEX IF NOT EXISTS idx_user_id ON users(user_id)")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_orders_user_id ON orders(user_id)")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_referral_id ON users(referral_id)")
        
        cur.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('course', ?)", (str(COURSE_DEFAULT),))
        
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()

def db_connect():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    conn = None
    try:
        conn = sqlite3.connect(DB)
        conn.row_factory = sqlite3.Row
        return conn
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

def register_user(user_id, username, referral_id=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if referral_id == user_id:
        referral_id = None
        
    try:
        conn = db_connect()
        cur = conn.cursor()
        
        cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        if not cur.fetchone():
            cur.execute(
                "INSERT INTO users (user_id, username, referral_id) VALUES (?, ?, ?)",
                (user_id, username, referral_id),
            )
            if referral_id:
                cur.execute(
                    "UPDATE users SET referrals_count = referrals_count + 1 WHERE user_id=?",
                    (referral_id,),
                )
        else:
            cur.execute("UPDATE users SET username=? WHERE user_id=?", (username, user_id))
        
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        if conn:
            conn.close()

def get_user(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = db_connect()
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        return cur.fetchone()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        if conn:
            conn.close()

def update_stars(user_id, amount):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–≤—ë–∑–¥"""
    try:
        conn = db_connect()
        cur = conn.cursor()
        cur.execute("UPDATE users SET stars = stars + ? WHERE user_id=?", (amount, user_id))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–≤—ë–∑–¥: {e}")
    finally:
        if conn:
            conn.close()

def add_order(user_id, recipient_username, stars_amount, price, paid=0):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        conn = db_connect()
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO orders (user_id, recipient_username, stars_amount, price, paid) VALUES (?, ?, ?, ?, ?)",
            (user_id, recipient_username, stars_amount, price, paid),
        )
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
    finally:
        if conn:
            conn.close()

def get_orders(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = db_connect()
        cur = conn.cursor()
        cur.execute("SELECT * FROM orders WHERE user_id=? ORDER BY created_at DESC", (user_id,))
        return cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        return []
    finally:
        if conn:
            conn.close()

def get_setting(key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        conn = db_connect()
        cur = conn.cursor()
        cur.execute("SELECT value FROM settings WHERE key=?", (key,))
        res = cur.fetchone()
        return res[0] if res else None
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        return None
    finally:
        if conn:
            conn.close()

def set_setting(key, value):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        conn = db_connect()
        cur = conn.cursor()
        if get_setting(key) is None:
            cur.execute("INSERT INTO settings (key, value) VALUES (?, ?)", (key, value))
        else:
            cur.execute("UPDATE settings SET value=? WHERE key=?", (value, key))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    finally:
        if conn:
            conn.close()

def add_feedback(user_id, text):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞"""
    try:
        conn = db_connect()
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO feedback (user_id, text) VALUES (?, ?)",
            (user_id, text),
        )
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
    finally:
        if conn:
            conn.close()

def clean_old_data():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = db_connect()
        cur = conn.cursor()
        cur.execute("DELETE FROM orders WHERE paid = 0 AND created_at < datetime('now', '-3 days')")
        conn.commit()
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if conn:
            conn.close()

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üåü –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="buy")],
        [InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="daily_bonus")],
        [InlineKeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
        [InlineKeyboardButton("üßæ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üí∏ –û–±–º–µ–Ω—è—Ç—å –±–æ–Ω—É—Å", callback_data="exchange_bonus")],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")],
    ]
    return InlineKeyboardMarkup(keyboard)

def admin_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å", callback_data="set_course")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    return InlineKeyboardMarkup(keyboard)

def cancel_keyboard(show_main_menu=True):
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    if show_main_menu:
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def confirm_order_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data="edit_recipient"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_amount")
        ],
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_order")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
    ])

# –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º

def admin_confirm_keyboard(order_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_order_{order_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_order_{order_id}")
        ]
    ])

async def show_main_menu(update, context, greeting=False):
    current_course = float(get_setting('course') or COURSE_DEFAULT)
    if greeting:
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ Timoteo Store!‚≠êÔ∏è –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ. –ë—ã—Å—Ç—Ä–æ, –¥–µ—à–µ–≤–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ! üîê\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞: @timoteo4"
        )
    else:
        text = (
            f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {current_course}‚ÇΩ –∑–∞ 1 –∑–≤–µ–∑–¥—É\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    if update.message:
        await update.message.reply_text(text, reply_markup=main_menu_keyboard())
    elif hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=main_menu_keyboard())

# ========== Fallback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ==========
MENU_KEYWORDS = {"–º–µ–Ω—é", "–Ω–∞–∑–∞–¥", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu", "main menu"}

def contains_menu_keyword(text):
    text = (text or "").lower().replace(" ", "")
    for kw in MENU_KEYWORDS:
        if kw.replace(" ", "") in text:
            return True
    return False

async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "") if update.message else ""
    if contains_menu_keyword(text):
        await show_main_menu(update, context, greeting=False)
        return ConversationHandler.END
    if update.message:
        await update.message.reply_text(
            "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '–º–µ–Ω—é' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É.",
            reply_markup=main_menu_keyboard()
        )
    return ConversationHandler.END

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    if update and hasattr(update, 'message'):
        try:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            try:
                await update.callback_query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        args = context.args
        referral_id = int(args[0]) if args and args[0].isdigit() else None
        user = update.effective_user
        if user:
            register_user(user.id, user.username or "", referral_id)
        context.user_data['course'] = float(get_setting('course') or COURSE_DEFAULT)
        await show_main_menu(update, context, greeting=True)
        if user and hasattr(user, 'id') and user.id in ADMIN_IDS and update.message:
            await update.message.reply_text("‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é: /admin")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n\n"
        "‚ÑπÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @timoteo4"
    )
    await update.message.reply_text(help_text)

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id if user and hasattr(user, 'id') else None
        if user_id in ADMIN_IDS and update.message:
            await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu_keyboard())
            return ADMIN_PANEL
        else:
            if update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_command: {e}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π"""
    try:
        query = update.callback_query if hasattr(update, 'callback_query') else None
        if query:
            await query.answer()
            if hasattr(query, 'message') and query.message:
                await query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
            return ConversationHandler.END
        if update.message:
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_handler: {e}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô ==========
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query if hasattr(update, 'callback_query') else None
        if not query:
            if update.message:
                await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            return ConversationHandler.END
        await query.answer()
        data = query.data if hasattr(query, 'data') else None
        user_id = query.from_user.id if hasattr(query, 'from_user') and query.from_user else None
        # --- –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø/–û–¢–ö–õ–û–ù–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê –ê–î–ú–ò–ù–û–ú ---
        if data and data.startswith("confirm_order_"):
            order_id = int(data.split("_")[-1])
            conn = db_connect()
            cur = conn.cursor()
            cur.execute("SELECT * FROM orders WHERE order_id=?", (order_id,))
            order = cur.fetchone()
            if not order or order['paid']:
                await query.edit_message_text("–ó–∞–∫–∞–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                conn.close()
                return ConversationHandler.END
            # –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤—ë–∑–¥—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            update_stars(order['user_id'], order['stars_amount'])
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
            cur.execute("UPDATE orders SET paid=1 WHERE order_id=?", (order_id,))
            conn.commit()
            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            user = get_user(order['user_id'])
            if user and user['referral_id']:
                referral_id = user['referral_id']
                bonus_rub = int(order['price'] * REF_PERCENT / 100)
                bonus_stars = int(order['stars_amount'] * REF_PERCENT / 100)
                cur.execute("""
                    UPDATE users 
                    SET referral_bonus = referral_bonus + ?,
                        stars = stars + ?
                    WHERE user_id = ?
                """, (bonus_rub, bonus_stars, referral_id))
                conn.commit()
            conn.close()
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            try:
                await context.bot.send_message(
                    order['user_id'],
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                    "–ë—É–¥—É —Ä–∞–¥ –µ—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∑–¥–µ—Å—å - @otzivi_timoteo\n"
                    "–ú–æ–π –º–∞–≥–∞–∑–∏–Ω —Å–æ –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ - @timoteo_store\n"
                    "–ñ–¥—É –≤–∞—Å —Å–Ω–æ–≤–∞."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await query.edit_message_text("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –∑–≤—ë–∑–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.")
            return ConversationHandler.END
        elif data and data.startswith("reject_order_"):
            order_id = int(data.split("_")[-1])
            conn = db_connect()
            cur = conn.cursor()
            cur.execute("SELECT * FROM orders WHERE order_id=?", (order_id,))
            order = cur.fetchone()
            if not order or order['paid']:
                await query.edit_message_text("–ó–∞–∫–∞–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω/–æ—Ç–∫–ª–æ–Ω—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                conn.close()
                return ConversationHandler.END
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–∫–∞–∑ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å paid=0)
            cur.execute("DELETE FROM orders WHERE order_id=?", (order_id,))
            conn.commit()
            conn.close()
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    order['user_id'],
                    "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @timoteo4"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await query.edit_message_text("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
            return ConversationHandler.END
        # –¥–∞–ª–µ–µ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ query.message –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º reply_text/edit_text
        if data == "buy":
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.reply_text(
                    "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–≤—ë–∑–¥ ‚≠êÔ∏è\n\n"
                    "üìù –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
                    "üí° –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–Ω–∏—Ç–µ —Å —Å–∏–º–≤–æ–ª–∞ @\n\n"
                    "üìã –§–æ—Ä–º–∞—Ç: @username\n\n"
                    "üíé –ó–≤—ë–∑–¥—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    reply_markup=ReplyKeyboardRemove()
                )
            return BUY_USERNAME
        elif data == "daily_bonus":
            user = get_user(user_id)
            last_spin = user['last_spin'] if user and user['last_spin'] else None
            if last_spin:
                last_spin_date = datetime.strptime(last_spin, "%Y-%m-%d")
                if datetime.now() - last_spin_date < timedelta(days=1):
                    if hasattr(query, 'message') and isinstance(query.message, Message):
                        await query.message.reply_text("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
                    return ConversationHandler.END
            # 95% —à–∞–Ω—Å 1-5, 5% —à–∞–Ω—Å 6-100
            import random
            chance = random.random()
            if chance < 0.95:
                reward = random.randint(1, 5)
            else:
                reward = random.randint(6, 100)
            update_stars(user_id, reward)
            try:
                conn = db_connect()
                cur = conn.cursor()
                cur.execute("UPDATE users SET last_spin=? WHERE user_id=?", (datetime.now().strftime("%Y-%m-%d"), user_id))
                conn.commit()
            finally:
                if conn:
                    conn.close()
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.reply_text(f"üéÅ –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {reward} –∑–≤—ë–∑–¥!\n\n–ó–∞–≥–ª—è–¥—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ!")
            return ConversationHandler.END
        elif data == "referrals":
            user = get_user(user_id)
            if user:
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text(
                        f"ü§ù –†–µ—Ñ–µ—Ä–∞–ª—ã: {user['referrals_count']}\n"
                        f"üéÅ –ë–æ–Ω—É—Å: {user['referral_bonus']}\n\n"
                        f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
                        f"t.me/{context.bot.username}?start={user_id}"
                    )
            else:
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return ConversationHandler.END
        elif data == "profile":
            user = get_user(user_id)
            if user:
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text(
                        f"üßæ –ü—Ä–æ—Ñ–∏–ª—å:\n"
                        f"‚≠ê –ó–≤—ë–∑–¥: {user['stars']}\n"
                        f"ü§ù –ë–æ–Ω—É—Å: {user['referral_bonus']}\n"
                        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user['referrals_count']}"
                    )
            else:
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return ConversationHandler.END
        elif data == "my_orders":
            orders = get_orders(user_id)
            if orders:
                text = "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
                for order in orders:
                    text += (
                        f"üÜî –ó–∞–∫–∞–∑ #{order['order_id']}\n"
                        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order['recipient_username']}\n"
                        f"‚≠ê –ó–≤—ë–∑–¥: {order['stars_amount']}\n"
                        f"üí∞ –°—É–º–º–∞: {order['price']}‚ÇΩ\n"
                        f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
                        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' if order['paid'] else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}\n\n"
                    )
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text(text, reply_markup=cancel_keyboard(show_main_menu=False))
                return VIEW_ORDERS
            else:
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=cancel_keyboard(show_main_menu=False))
                return VIEW_ORDERS
        elif data == "feedback":
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=cancel_keyboard(show_main_menu=False))
            return LEAVE_FEEDBACK
        elif data == "exchange_bonus":
            user = get_user(user_id)
            bonus = user['referral_bonus'] if user else 0
            current_course = float(get_setting('course') or COURSE_DEFAULT)
            if bonus < 50:
                msg = f"–í–∞—à –±–æ–Ω—É—Å: {bonus}‚ÇΩ\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ ‚Äî 50‚ÇΩ.\n–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text(msg, reply_markup=cancel_keyboard(show_main_menu=False))
                return ConversationHandler.END
            msg = (
                f"üí∏ –í–∞—à –±–æ–Ω—É—Å: {bonus}‚ÇΩ\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ —Ä—É–±–ª–∏ –Ω–∞ –∑–≤—ë–∑–¥—ã –ø–æ –∫—É—Ä—Å—É {current_course}‚ÇΩ –∑–∞ 1 –∑–≤–µ–∑–¥—É.\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ ‚Äî 50‚ÇΩ.\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–µ –±–æ–ª–µ–µ {bonus}):"
            )
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.reply_text(msg, reply_markup=cancel_keyboard(show_main_menu=False))
            context.user_data['max_bonus'] = bonus
            return EXCHANGE_BONUS
        elif data == "set_course":
            if user_id not in ADMIN_IDS:
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
                return ConversationHandler.END
            current_course = float(get_setting('course') or COURSE_DEFAULT)
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.reply_text(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {current_course}‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:")
            return ADMIN_SET_COURSE
        elif data == "stats":
            if user_id not in ADMIN_IDS:
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
                return ConversationHandler.END
            try:
                conn = db_connect()
                cur = conn.cursor()
                cur.execute("SELECT COUNT(*) as users_count, SUM(stars) as total_stars FROM users")
                stats = cur.fetchone()
                cur.execute("""
                    SELECT 
                        u.user_id,
                        u.username,
                        u.referrals_count,
                        u.referral_bonus,
                        COUNT(o.order_id) as orders_count,
                        SUM(o.price) as total_income
                    FROM users u
                    LEFT JOIN orders o ON u.user_id = o.user_id
                    WHERE u.referrals_count > 0
                    GROUP BY u.user_id
                    ORDER BY u.referrals_count DESC
                """)
                referrals = cur.fetchall()
                text = (
                    f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
                    f"‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: {stats['total_stars'] or 0}\n\n"
                    f"ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n"
                )
                for ref in referrals:
                    text += (
                        f"\n@{ref['username']} (ID: {ref['user_id']})\n"
                        f"‚Üí –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref['referrals_count']}\n"
                        f"‚Üí –ë–æ–Ω—É—Å–æ–≤: {ref['referral_bonus']}\n"
                        f"‚Üí –ó–∞–∫–∞–∑–æ–≤: {ref['orders_count']}\n"
                        f"‚Üí –°—É–º–º–∞: {ref['total_income'] or 0}‚ÇΩ\n"
                    )
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text(text)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            finally:
                if conn:
                    conn.close()
            return ADMIN_PANEL
        elif data == "broadcast":
            if user_id not in ADMIN_IDS:
                if hasattr(query, 'message') and isinstance(query.message, Message):
                    await query.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
                return ConversationHandler.END
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
            return ADMIN_BROADCAST
        elif data == "main_menu":
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
            return ConversationHandler.END
        elif data == "cancel":
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
            return ConversationHandler.END
        elif data == "pay_order":
            price = context.user_data.get("price") if context.user_data else None
            recipient = context.user_data.get("recipient_username", "-") if context.user_data else "-"
            amount = context.user_data.get("stars_amount") if context.user_data else None
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.reply_text(
                    f"<b>–†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –û–ü–õ–ê–¢–´:</b>\n"
                    f"+79652234445 –¢-–±–∞–Ω–∫\n\n"
                    f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{price}‚ÇΩ</b>\n\n"
                    f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ <b>–æ–ø–ª–∞—Ç–∏–ª</b> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
                    f"\n–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –ó–≤—ë–∑–¥—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                    reply_markup=cancel_keyboard(),
                    parse_mode=ParseMode.HTML
                )
            return WAIT_PAYMENT
        elif data == "edit_recipient":
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.reply_text(
                    "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–≤—ë–∑–¥ ‚≠êÔ∏è\n\n"
                    "üìù –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
                    "üí° –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–Ω–∏—Ç–µ —Å —Å–∏–º–≤–æ–ª–∞ @\n\n"
                    "üìã –§–æ—Ä–º–∞—Ç: @username\n\n"
                    "üíé –ó–≤—ë–∑–¥—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    reply_markup=ReplyKeyboardRemove()
                )
            return BUY_USERNAME
        elif data == "edit_amount":
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.reply_text(
                    f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ (–º–∏–Ω. {MIN_STARS}):",
                    reply_markup=cancel_keyboard(show_main_menu=False)
                )
            return BUY_AMOUNT
        else:
            if hasattr(query, 'message') and isinstance(query.message, Message):
                await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        if hasattr(update, 'callback_query') and update.callback_query and hasattr(update.callback_query, 'message') and update.callback_query.message:
            await update.callback_query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def buy_username_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = (update.message.text or "") if update.message and update.message.text else ""
        if contains_menu_keyword(text):
            await show_main_menu(update, context, greeting=False)
            return ConversationHandler.END
        if not (update.message and update.message.text):
            if isinstance(update.message, Message):
                await update.message.reply_text("–û—à–∏–±–∫–∞! Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_keyboard(show_main_menu=False))
            return BUY_USERNAME
        username = update.message.text.strip()
        if not username.startswith("@") or len(username) < 2:
            if isinstance(update.message, Message):
                await update.message.reply_text("–û—à–∏–±–∫–∞! Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_keyboard(show_main_menu=False))
            return BUY_USERNAME
        context.user_data["recipient_username"] = username
        if isinstance(update.message, Message):
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ (–º–∏–Ω. {MIN_STARS}):", reply_markup=cancel_keyboard(show_main_menu=False))
        return BUY_AMOUNT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_username_handler: {e}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

async def buy_amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = (update.message.text or "") if update.message and update.message.text else ""
        if contains_menu_keyword(text):
            await show_main_menu(update, context, greeting=False)
            return ConversationHandler.END
        if not (update.message and update.message.text):
            if isinstance(update.message, Message):
                await update.message.reply_text("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=cancel_keyboard(show_main_menu=False))
            return BUY_AMOUNT
        amount = int(update.message.text.strip())
    except ValueError:
        if isinstance(update.message, Message):
            await update.message.reply_text("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=cancel_keyboard(show_main_menu=False))
        return BUY_AMOUNT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_amount_handler: {e}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    if amount < MIN_STARS:
        if isinstance(update.message, Message):
            await update.message.reply_text(f"–ú–∏–Ω–∏–º—É–º {MIN_STARS} –∑–≤—ë–∑–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=cancel_keyboard(show_main_menu=False))
        return BUY_AMOUNT
    context.user_data["stars_amount"] = amount
    price = round(amount * context.user_data.get('course', COURSE_DEFAULT), 2)
    context.user_data["price"] = price
    recipient = context.user_data.get("recipient_username", "-")
    confirm_text = (
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚úÖ</b>\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <b>{recipient}</b>\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: <b>{amount} ‚≠êÔ∏è</b>\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{price}‚ÇΩ</b>\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞, –Ω–∞–∂–º–∏—Ç–µ <b>–û–ø–ª–∞—Ç–∏—Ç—å</b>."
    )
    if isinstance(update.message, Message):
        await update.message.reply_text(confirm_text, reply_markup=confirm_order_keyboard(), parse_mode=ParseMode.HTML)
    return CONFIRM_ORDER

async def wait_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = (update.message.text or "") if update.message and update.message.text else ""
        if contains_menu_keyword(text):
            await show_main_menu(update, context, greeting=False)
            return ConversationHandler.END
        has_photo = bool(update.message.photo) if update.message and hasattr(update.message, 'photo') else False
        if "–æ–ø–ª–∞—Ç–∏–ª" in text or has_photo:
            user_id = update.effective_user.id
            payment_data = context.user_data
            if has_photo:
                photo = await update.message.photo[-1].get_file()
                filename = f"{PAYMENTS_DIR}/{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
                await photo.download_to_drive(filename)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ —Å paid=0
            add_order(
                user_id=user_id,
                recipient_username=payment_data['recipient_username'],
                stars_amount=payment_data['stars_amount'],
                price=payment_data['price'],
                paid=0
            )
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ (–ø–æ user_id –∏ paid=0, —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π)
            conn = db_connect()
            cur = conn.cursor()
            cur.execute("SELECT order_id FROM orders WHERE user_id=? AND paid=0 ORDER BY created_at DESC LIMIT 1", (user_id,))
            order = cur.fetchone()
            order_id = order['order_id'] if order else None
            conn.close()
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            for admin_id in ADMIN_IDS:
                try:
                    buyer_username = f"@{update.effective_user.username}" if update.effective_user and update.effective_user.username else f"–Ω–µ —É–∫–∞–∑–∞–Ω (ID: {update.effective_user.id})"
                    recipient_username = payment_data['recipient_username'] if payment_data.get('recipient_username') else '–Ω–µ —É–∫–∞–∑–∞–Ω'
                    await context.bot.send_message(
                        admin_id,
                        f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n"
                        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_username}\n"
                        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_username}\n"
                        f"–°—É–º–º–∞: <b>{payment_data['price']}‚ÇΩ</b>",
                        reply_markup=admin_confirm_keyboard(order_id),
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            if update.message:
                await update.message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                    reply_markup=main_menu_keyboard()
                )
            return ConversationHandler.END
        else:
            if update.message:
                await update.message.reply_text("–ù–µ –≤–∏–∂—É –æ–ø–ª–∞—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ–ø–ª–∞—Ç–∏–ª'.", reply_markup=cancel_keyboard())
            return WAIT_PAYMENT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ wait_payment_handler: {e}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

async def admin_set_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = (update.message.text or "") if update.message and update.message.text else ""
        if contains_menu_keyword(text):
            await show_main_menu(update, context, greeting=False)
            return ConversationHandler.END
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            if update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_menu_keyboard())
            return ConversationHandler.END
        try:
            new_course = float(update.message.text.strip())
        except:
            if update.message:
                await update.message.reply_text("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=cancel_keyboard())
            return ADMIN_SET_COURSE
        set_setting("course", str(new_course))
        context.user_data['course'] = new_course
        if update.message:
            await update.message.reply_text(f"–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {new_course}‚ÇΩ", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_set_course: {e}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

async def admin_broadcast_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = (update.message.text or "") if update.message and update.message.text else ""
        if contains_menu_keyword(text):
            await show_main_menu(update, context, greeting=False)
            return ConversationHandler.END
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            if update.message:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=main_menu_keyboard())
            return ConversationHandler.END
        text = update.message.text.strip() if update.message and update.message.text else ""
        if not text:
            if update.message:
                await update.message.reply_text("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=cancel_keyboard())
            return ADMIN_BROADCAST
        try:
            conn = db_connect()
            cur = conn.cursor()
            cur.execute("SELECT user_id FROM users")
            users = cur.fetchall()
            count = 0
            for (uid,) in users:
                try:
                    await context.bot.send_message(uid, f"üì¢ –ê–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞:\n\n{text}")
                    count += 1
                    await asyncio.sleep(0.05)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {uid}: {e}")
            if update.message:
                await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=main_menu_keyboard())
        finally:
            if conn:
                conn.close()
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_broadcast_handler: {e}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

async def leave_feedback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = (update.message.text or "") if update.message and update.message.text else ""
        if contains_menu_keyword(text):
            await show_main_menu(update, context, greeting=False)
            return ConversationHandler.END
        user_id = update.effective_user.id
        text = update.message.text.strip() if update.message and update.message.text else ""
        if len(text) < 5:
            if update.message:
                await update.message.reply_text("–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.", reply_markup=cancel_keyboard())
            return LEAVE_FEEDBACK
        add_feedback(user_id, text)
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    admin_id,
                    f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{update.effective_user.username}:\n\n{text}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        if update.message:
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!",
                reply_markup=main_menu_keyboard()
            )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ leave_feedback_handler: {e}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

async def exchange_bonus_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = (update.message.text or "") if update.message and update.message.text else ""
        if contains_menu_keyword(text):
            await show_main_menu(update, context, greeting=False)
            return ConversationHandler.END
        user_id = update.effective_user.id
        user = get_user(user_id)
        bonus = user['referral_bonus'] if user else 0
        current_course = float(get_setting('course') or COURSE_DEFAULT)
        try:
            amount = int(text.strip())
        except:
            if update.message:
                await update.message.reply_text("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=cancel_keyboard())
            return EXCHANGE_BONUS
        if amount < 50:
            if update.message:
                await update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ ‚Äî 50‚ÇΩ.", reply_markup=cancel_keyboard())
            return EXCHANGE_BONUS
        if amount > bonus:
            if update.message:
                await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—É–º–º—ã –±–æ–Ω—É—Å–∞. –ú–∞–∫—Å–∏–º—É–º: {bonus}‚ÇΩ", reply_markup=cancel_keyboard())
            return EXCHANGE_BONUS
        stars = int(amount / current_course)
        if stars < 1:
            if update.message:
                await update.message.reply_text("–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –Ω–∞ 1 –∑–≤–µ–∑–¥—É.", reply_markup=cancel_keyboard())
            return EXCHANGE_BONUS
        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –∑–≤—ë–∑–¥—ã
        try:
            conn = db_connect()
            cur = conn.cursor()
            cur.execute("UPDATE users SET referral_bonus = referral_bonus - ?, stars = stars + ? WHERE user_id = ?", (amount, stars, user_id))
            conn.commit()
        finally:
            if conn:
                conn.close()
        if update.message:
            await update.message.reply_text(f"‚úÖ {amount}‚ÇΩ —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–Ω—ã –Ω–∞ {stars} –∑–≤—ë–∑–¥!", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ exchange_bonus_handler: {e}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º Application —Å JobQueue
    application = (
        ApplicationBuilder()
        .token(TOKEN)
        .build()
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("admin", admin_command),
            CommandHandler("help", help_command),
            CallbackQueryHandler(button_handler),
        ],
        states={
            CHOOSING: [CallbackQueryHandler(button_handler)],
            BUY_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_username_handler)],
            BUY_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_amount_handler)],
            WAIT_PAYMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, wait_payment_handler),
                MessageHandler(filters.PHOTO, wait_payment_handler),
            ],
            ADMIN_PANEL: [CallbackQueryHandler(button_handler)],
            ADMIN_SET_COURSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_set_course)],
            ADMIN_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_handler)],
            VIEW_ORDERS: [CallbackQueryHandler(button_handler), MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_handler)],
            LEAVE_FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, leave_feedback_handler), CallbackQueryHandler(cancel_handler)],
            EXCHANGE_BONUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, exchange_bonus_handler)],
            CONFIRM_ORDER: [CallbackQueryHandler(button_handler)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_handler),
            CommandHandler("start", start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_handler),
        ],
        allow_reentry=True,
    )

    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω JobQueue)
    try:
        application.job_queue.run_once(clean_old_data, when=5)
    except AttributeError:
        logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ä–∞–∑—É
        clean_old_data()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()